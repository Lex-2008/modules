# Example policy illustraing the use of custom promise module groups.
#
# Note: As of 3.20.0, custom promise modules support the use of custom bodies.
#       Versions before 3.20.0 uses JSON strings or data containers to define
#       members instead.


promise agent groups
# @brief Define groups promise type.
{
  path => "$(sys.workdir)/modules/promises/groups.py";
  interpreter => "/usr/bin/python3";
}

@if minimum_version(3.20)
body members foo
# @breif Define members for group foo using attributes `include` and
#        `exclude`.
{
  include => { "alice", "bob" };
  exclude => { "malcom" };
}
@else
bundle common foo
# @breif Define members using JSON string.
{
  vars:
      "members"
        string => '{ "include": ["alice", "bob"],
                     "exclude": ["malcom"] }';
}
@endif


@if minimum_version(3.20)
body members bar
# @breif Define members for group bar using attribute `only`.
{
  only => { "alice" };
}
@else
bundle common bar
# @brief Define members using data container.
{
  vars:
      "members"
        data => '{ "only": ["alice"] }';
}
@endif


bundle agent example_groups
# @breif Example groups promise statements.
{
  groups:
      "foo"
        policy => "present",
@if minimum_version(3.20)
        members => foo;
@else
        members => "$(foo.members)";
@endif

      "bar"
      # policy defaults to present
@if minimum_version(3.20)
        members => bar,
@else
        members => "@(bar.members)",
@endif
        gid => "1234";

      "baz"
        policy => "absent";
}


bundle agent example_users
# @breif Create users for the groups example.
{
  users:
      "alice"
        policy => "present";
      "bob"
        policy => "present";
      "malcom"
        policy => "present";
}


bundle agent __main__
{
  methods:
      "example_users";
      "example_groups";
}
